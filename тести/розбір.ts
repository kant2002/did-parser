/// <reference path="../ісх/sample.d.ts" />
import { ВузелЗаписуОбʼекта, ВузелЗаписуСловника, ВузелСловника, ВузелСписка, ЛогічнийВузел, ОбʼектнийВузел, ПустийВузел, розібрати, ТекстовийВузел, ЧисловийВузел } from "../ісх";
import matchers from "expect/build/matchers";
import toThrowMatchers from "expect/build/toThrowMatchers";

declare global {
  namespace jest {
    interface Matchers<R, T = {}> {
      дорівнює(expected: any): CustomMatcherResult;
      будє(expected: any): CustomMatcherResult;
      викине(expected: any): CustomMatcherResult;
      будєПустим(): CustomMatcherResult;
    }
  }
}

const тест = test;
const птест = xtest;
const описати = describe;
const очікувати = expect;
очікувати.extend({
  дорівнює: matchers.toEqual,
  будє: matchers.toBe,
  викине: toThrowMatchers.toThrow,
  будєПустим: matchers.toBeNull,
})

тест('швидкий тест', () => {
  const дані = розібрати(`Паспорт(
        прізвище="Когут",
        імʼя="Давид",
        по_батькові="Богданович",
        дата_народження=Дата(
          день=20,
          місяць=1,
          рік=2001
        ),
        застарілий=ні
      )
    `);
  очікувати(дані).not.будєПустим();
});
описати("числа", () => {
  тест('цілі числа', () => {
    const дані = розібрати(`20`);
    очікувати(дані).дорівнює(new ЧисловийВузел(20));
  });
  тест('числа із плаваючею точкою', () => {
    const дані = розібрати(`120.2`);
    очікувати(дані).дорівнює(new ЧисловийВузел(120.2));
  });
  тест('негативні числа', () => {
    const дані = розібрати(`-20.2`);
    очікувати(дані).дорівнює(new ЧисловийВузел(-20.2));
  });
  тест('негативні числа із пробелом', () => {
    очікувати(() => розібрати(`- 20.2`)).викине("");
  });
})

описати("Логічні значення", () => {
  тест('так', () => {
    const дані = розібрати(`так`);
    очікувати(дані).дорівнює(new ЛогічнийВузел(true));
  });
  тест('ні', () => {
    const дані = розібрати(`ні`);
    очікувати(дані).дорівнює(new ЛогічнийВузел(false));
  });
})

тест('пусто', () => {
  const дані = розібрати(`пусто`);
  очікувати(дані).будє(ПустийВузел.екземпляр);
  очікувати(дані).будє(ПустийВузел.instance);
});

описати("Текстові рядки", () => {
  тест('звичайна строка', () => {
    const дані = розібрати(`"Привіт від Лесі!"`);
    очікувати(дані).дорівнює(new ТекстовийВузел("Привіт від Лесі!"));
  });
  тест('екрановані символи', () => {
    const дані = розібрати("\"\\n\\r\"");
    очікувати(дані).дорівнює(new ТекстовийВузел("\n\r"));
  });
})

описати("Обʼектні дані", () => {
  тест('типовий обʼект', () => {
    const дані = розібрати(`Паспорт(
      прізвище="Когут",
      імʼя="Давид",
      по_батькові="Богданович",
      дата_народження=Дата(
        день=20,
        місяць=1,
        рік=2001
      ),
      борг=пусто,
      застарілий=ні
    )`);
    очікувати(дані).дорівнює(new ОбʼектнийВузел("Паспорт", [
      new ВузелЗаписуОбʼекта("прізвище", new ТекстовийВузел("Когут")),
      new ВузелЗаписуОбʼекта("імʼя", new ТекстовийВузел("Давид")),
      new ВузелЗаписуОбʼекта("по_батькові", new ТекстовийВузел("Богданович")),
      new ВузелЗаписуОбʼекта("дата_народження", new ОбʼектнийВузел("Дата", [
        new ВузелЗаписуОбʼекта("день", new ЧисловийВузел(20)),
        new ВузелЗаписуОбʼекта("місяць", new ЧисловийВузел(1)),
        new ВузелЗаписуОбʼекта("рік", new ЧисловийВузел(2001)),
      ])),
      new ВузелЗаписуОбʼекта("борг", ПустийВузел.екземпляр),
      new ВузелЗаписуОбʼекта("застарілий", new ЛогічнийВузел(false)),
    ]));
  });
  тест('обʼект із назвою так', () => {
    const дані = розібрати(`так(
      прізвище="Когут",
    )`);
    очікувати(дані).дорівнює(new ОбʼектнийВузел("так", [
      new ВузелЗаписуОбʼекта("прізвище", new ТекстовийВузел("Когут")),
    ]));
  });
  тест('обʼект із назвою ні', () => {
    const дані = розібрати(`ні(
      прізвище="Когут",
    )`);
    очікувати(дані).дорівнює(new ОбʼектнийВузел("ні", [
      new ВузелЗаписуОбʼекта("прізвище", new ТекстовийВузел("Когут")),
    ]));
  });
  тест('обʼект із назвою пусто', () => {
    const дані = розібрати(`пусто(
      прізвище="Когут",
    )`);
    очікувати(дані).дорівнює(new ОбʼектнийВузел("пусто", [
      new ВузелЗаписуОбʼекта("прізвище", new ТекстовийВузел("Когут")),
    ]));
  });
  тест('пропуск коми дає помилку', () => {
    очікувати(() => розібрати(`Людина(
      прізвище="Когут"
      імʼя="Давид"
    )`)).викине("Очікувалася кома. Замість цього на рядку 3 стовпець 7 знаходиься 'імʼя'");
  });
})

описати("Список", () => {
  тест('типовий обʼект', () => {
    const дані = розібрати(`[1, -2, 3.14, "привіт", Людина(імʼя="Давид"), ["2211"]]`);
    очікувати(дані).дорівнює(new ВузелСписка([
      new ЧисловийВузел(1),
      new ЧисловийВузел(-2),
      new ЧисловийВузел(3.14),
      new ТекстовийВузел("привіт"),
      new ОбʼектнийВузел("Людина", [
        new ВузелЗаписуОбʼекта("імʼя", new ТекстовийВузел("Давид")),
      ]),
      new ВузелСписка([new ТекстовийВузел("2211")]),
    ]));
  });
  тест('пропуск коми дає помилку', () => {
    очікувати(() => розібрати(`[1, -2, 3.14, "привіт" Людина(імʼя="Давид"), ["2211"]]`))
      .викине("Очікувалася кома. Замість цього на рядку 1 стовпець 24 знаходиься 'Людина'");
  });
})

описати("Словник", () => {
  тест('типовий обʼект', () => {
    const дані = розібрати(`(а=2, "б"="2", в=[], г=(), Ґ=Книжка(), 999=238)`);
    очікувати(дані).дорівнює(new ВузелСловника([
      new ВузелЗаписуСловника(new ТекстовийВузел("а"), new ЧисловийВузел(2)),
      new ВузелЗаписуСловника(new ТекстовийВузел("б"), new ТекстовийВузел("2")),
      new ВузелЗаписуСловника(new ТекстовийВузел("в"), new ВузелСписка([])),
      new ВузелЗаписуСловника(new ТекстовийВузел("г"), new ВузелСловника([])),
      new ВузелЗаписуСловника(new ТекстовийВузел("Ґ"), new ОбʼектнийВузел("Книжка", [])),
      new ВузелЗаписуСловника(new ЧисловийВузел(999), new ЧисловийВузел(238)),
    ]));
  });
  тест('пропуск коми дає помилку', () => {
    очікувати(() => розібрати(`(а=2, "б"="2", є=[] Ї=(), Ґ=Книжка(), 999=238)`))
      .викине("Очікувалася кома. Замість цього на рядку 1 стовпець 21 знаходиься 'Ї'");
  });
})